local Library = {}

-- Services
local HttpService = game:GetService("HttpService")
local TweenService = game:GetService("TweenService")
local TextService = game:GetService("TextService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local PlayerGui = Players.LocalPlayer:WaitForChild("PlayerGui")

Library.Services = {
    HttpService = HttpService,
    TweenService = TweenService,
    TextService = TextService,
    UserInputService = UserInputService,
    RunService = RunService,
    Players = Players,
}
Library.PlayerGui = PlayerGui

-- Core state
Library.Config = {
    ToggleKey = Enum.KeyCode.K,
    TabPadding = 2,
    DragHalfLife = 0.06,
    DragSmoothness = 0.2,
}
Library._widgetRegistry = {}
Library._toggleBinds = {}
Library._captureBlockInput = false
Library._suppressCallbacks = false

-- Simple module loader for executors (local files)
local function resolveBaseDir()
    local env
    pcall(function() env = getgenv and getgenv() end)
    if type(env) == "table" and type(env.__Eps1llonUI_BaseDir) == "string" then
        return env.__Eps1llonUI_BaseDir
    end
    local src
    pcall(function() src = debug.getinfo(1, "S") end)
    if type(src) == "table" and type(src.source) == "string" then
        local s = src.source
        if s:sub(1,1) == "@" then s = s:sub(2) end
        local dir = s:match("^(.*)[/\\]") or ""
        if dir ~= "" then return dir end
    end
    return "Eps1llonUI"
end

local BASE_DIR = resolveBaseDir()
local MODULES_DIR = (BASE_DIR == "" and "modules") or (BASE_DIR .. "/modules")

local function requireModule(name)
    local path = MODULES_DIR .. "/" .. name .. ".lua"
    if type(isfile) == "function" and type(readfile) == "function" and isfile(path) then
        local chunk, err = loadstring(readfile(path), "=" .. path)
        if not chunk then error("Failed to load module " .. name .. ": " .. tostring(err)) end
        local ret = chunk()
        if type(ret) == "function" then
            ret(Library)
        end
        return true
    else
        error("Module file not found: " .. path)
    end
end

-- Load modules in dependency order
requireModule("compat")
requireModule("theme")
requireModule("settings")
requireModule("keys")
requireModule("notifications")
requireModule("window")

return Library

